deleteNode = self.search(data)
        parentNode = deleteNode.parent

        # case 1) 삭제할 노드가 리프일 때!
        if deleteNode.leftChild is None and deleteNode.rightChild is None:
            # 삭제할 노드가 루트인 경우
            if deleteNode is self.root:
                self.root = Node()
                return
            
            if deleteNode.data < parentNode.data:
                parentNode.left = None
            
            else:
                parentNode.right = None
        
        # case 2-1) 삭제할 노드의 서브트리가 왼쪽 하나인 경우
        if deleteNode.leftChild is not None and deleteNode.rightChild is None:
            if deleteNode is self.root:
                self.root = deleteNode.leftChild
                deleteNode.leftChild.parent = None
                return
            
            if deleteNode.data < parentNode.data:
                parentNode.leftChild = deleteNode.leftChild
                deleteNode.leftChild.parent = parentNode
            
            else:
                parentNode.rightChild = deleteNode.leftChild
                deleteNode.leftChild.parent = parentNode

        # case 2-2) 삭제할 노드의 서브트리가 오른쪽 하나인 경우
        elif deleteNode.leftChild is None and deleteNode.rightChild is not None:
            if deleteNode is self.root:
                self.root = deleteNode.rightChild
                deleteNode.rightChild.parent = None
                return
            
            if deleteNode.data < parentNode.data:
                parentNode.leftChild = deleteNode.rightChild
                deleteNode.rightChild.parent = parentNode
            
            else:
                parentNode.rightChild = deleteNode.rightChild
                deleteNode.rightChild.parent = parentNode
        
        # case 3) 삭제할 노드의 서브트리가 두개인 경우
        else:
            